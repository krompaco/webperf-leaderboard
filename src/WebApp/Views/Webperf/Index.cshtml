@using System.Globalization
@model WebApp.Services.Generated.WebperfIndexResponse
@{
	var headings = new[] { "Lighthouse Performance", "404 page", "Lighthouse SEO", "Lighthouse Best Practices", "W3C HTML", "W3C CSS", "Lighthouse PWA", "Standard files", "Lighthouse A11y", "Yellow Lab Tools", "Webbkoll" };
	var excludedTypes = new[] { 7, 8 };
}

<h2 class="font-bold text-xl mb-3 pt-6">Test results from <a class="text-blue-800 underline hover:text-blue-900" href="https://github.com/Webperf-se/webperf_core">Webperf-se/webperf_core</a></h2>

<p class="mb-3">CSS and Lighthouse PWA are excluded from site average score.</p>

@if (Model.Sites.Count > 0)
{
	var rank = 0;
	<ul class="mb-12 flex flex-wrap">
		@foreach (var site in Model.Sites)
		{
			rank++;
			<li class="mb-2 w-full sm:w-1/2 lg:w-1/3 xl:w-2/12">
				<div class="p-3 bg-gray-200 sm:mr-3">
				<span class="flex items-center mb-3">
					<span class="block mr-2">#@rank</span>
					<span class="rounded-full bg-gray-900 px-3 py-2 text-sm text-white font-bold">@site.Rating.ToString("0.00", new CultureInfo("en-US"))</span>
					</span>
					<a class="block truncate text-blue-800 underline hover:text-blue-900" href="#pos-@rank">@site.Title</a>
				</div>
			</li>
		}
	</ul>
	rank = 0;
	<ul class="mb-12">
		@foreach (var site in Model.Sites)
		{
			rank++;
			var i = 0;
			<li id="pos-@rank" class="mb-8 @(rank == 1 ? "pt-8" : "pt-8 border-t border-gray-600")">
				<div class="flex flex-wrap">
					<div class="w-full sm:w-1/2 lg:w-1/3 xl:w-2/12">
						<div class="p-3 bg-gray-200 sm:mr-3">
							<h3 class="text-lg mb-4">
								<span class="flex items-center mb-3">
									<span class="block mr-2">#@rank</span>
									<span class="rounded-full bg-gray-900 px-3 py-2 text-lg text-white font-bold">@site.Rating.ToString("0.00", new CultureInfo("en-US"))</span>
								</span>
								<a class="block truncate text-blue-800 underline hover:text-blue-900" href="@site.Url">@site.Title</a>
							</h3>
							<p class="text-sm">Ran between @site.Tests.Min(x => x.TestDate).ToString("yyyy-MM-dd HH:mm:ss") and @site.Tests.Max(x => x.TestDate).ToString("HH:mm:ss", new CultureInfo("en-US")).</p>
						</div>
					</div>
					@if (site.Tests.Count == 11)
					{
						@foreach (var test in site.Tests)
						{
							<div class="p-3 w-full sm:w-1/2 md:w-1/3 xl:w-2/12">
								<h4 class="flex items-center text-lg mb-2">
									<span class="block truncate mr-2">@headings[i]</span>
									<span class="rounded-full @(excludedTypes.Contains(test.TypeOfTest) ? "bg-gray-600" : "bg-gray-700") bg-black px-2 py-1 text-sm text-white font-bold">@test.Rating.ToString("0.0", new CultureInfo("en-US"))</span>
								</h4>
								@Html.Raw(Markdig.Markdown.ToHtml(test.ReportText).Replace("<li>", "<li class=\"mb-1 text-sm\">").Replace("<ul>", "<ul class=\"list-disc list-outside ml-4\">").Replace("<p>", "<p class=\"mt-3\">").Replace("org.w3c.css.parser.analyzer.ParseException", "analyzer.ParseException").Replace("Look up", " Look up"))
							</div>
							i++;
						}
					}
					else
					{
						<div class="p-3 w-full sm:w-1/2 md:w-1/3 xl:w-2/12">
							<h4 class="flex items-center text-lg mb-2">
								<span class="mr-2">Errors occured during last run.</span>
							</h4>
						</div>
					}
				</div>
			</li>
		}
	</ul>
}

