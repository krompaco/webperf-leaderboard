@using System.Globalization
@using WebApp.Services.Generated
@inject IApiClient ApiClient

@{
    var divId = "history-" + Site.SiteId;
    var testTypes = new TestTypes();
}

<ButtonPrimary OnClickCallback="@(async () => await this.ToggleHistory())" ExtraClasses="mt-3" AriaExpanded="@Visible" AriaControls="@divId">@this.ButtonText for @Site.Title</ButtonPrimary>

@if (this.Model != null && this.Visible)
{
    var i = 0;
    <div class="prose prose-sm max-w-none" id="history-@Site.SiteId">
        <div class="table-wrapper sm:mr-3">
            <table>
                <caption class="text-left font-extrabold tracking-tight text-gray-700 text-xl mb-4">History for @Site.Title</caption>
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Average Score</th>
                        @foreach (var test in Site.Tests)
                        {
                            <th scope="col">@testTypes.AllHeadings[i]</th>
                            i++;
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var site in this.Model.TestRuns.Where(x => x.Tests.Count == testTypes.Count))
                    {
                        <tr>
                            <td>@site.Tests.Min(x => x.TestDate).ToString("yyyy-MM-dd")</td>
                            <td class="font-bold tracking-tight text-gray-700">@site.Rating.ToString("0.00", new CultureInfo("en-US"))</td>
                            @{ i = 0; }
                            @foreach (var test in Site.Tests)
                            {
                                <td title="@testTypes.AllHeadings[i] @test.Rating.ToString("0.00", new CultureInfo("en-US"))">@test.Rating.ToString("0.0", new CultureInfo("en-US"))</td>
                                i++;
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public WebperfSite Site { get; set; }

    private WebperfTestsResponse Model { get; set; }

    private bool Visible { get; set; }

    private string ButtonText = "Show history";

    private async Task ToggleHistory()
    {
        if (this.Site == null)
        {
            return;
        }

        this.Visible = !this.Visible;

        this.ButtonText = this.Visible ? "Hide history" : "Show history";

        if (!this.Visible || this.Model != null)
        {
            return;
        }

        this.Model = await this.ApiClient.WebperfTestsAsync(this.Site.SiteId);
    }
}
